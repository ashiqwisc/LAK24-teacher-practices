weights = colMeans(tutor_and_detector_and_teacher_set$line.weights$visit_class$`-1`) -
colMeans(tutor_and_detector_and_teacher_set$line.weights$visit_class$`1`),
edge_arrow_saturation_multiplier = edge_arrow_saturation_multiplier,
edge_size_multiplier = edge_size_multiplier,
node_position_multiplier = node_position_multiplier,
edge_color = c("black", "purple")
) %>%
nodes (
node_size_multiplier = node_size_multiplier,
node_position_multiplier = node_position_multiplier,
self_connection_color = c("black", "purple")
)
print(diff)
pre_low <- ona:::plot.ena.directed.set(tutor_and_detector_and_teacher_set, title = "Low Learning rate Pre-visit (grey)")  %>%
edges (
weights = colMeans(tutor_and_detector_and_teacher_set$line.weights[tutor_and_detector_and_teacher_set$line.weights$visit_class == -1 & tutor_and_detector_and_teacher_set$line.weights$high_learning_rate == 0,]),
edge_arrow_saturation_multiplier = edge_arrow_saturation_multiplier,
edge_size_multiplier = edge_size_multiplier,
node_position_multiplier = node_position_multiplier,
edge_color = c("black")
) %>%
nodes (
node_size_multiplier = node_size_multiplier,
node_position_multiplier = node_position_multiplier,
self_connection_color = c("black")
) %>%
units(
points = tutor_and_detector_and_teacher_set$points[tutor_and_detector_and_teacher_set$points$visit_class == -1 & tutor_and_detector_and_teacher_set$points$high_learning_rate == 0,],
points_color = c("black"),
show_mean = TRUE, show_points = FALSE, with_ci = TRUE
)
print(pre_low)
post_low <- ona:::plot.ena.directed.set(tutor_and_detector_and_teacher_set, title = "Low Learning rate Post-visit (purple)")  %>%
edges (
weights = colMeans(tutor_and_detector_and_teacher_set$line.weights[tutor_and_detector_and_teacher_set$line.weights$visit_class == 1 & tutor_and_detector_and_teacher_set$line.weights$high_learning_rate == 0,]),
edge_arrow_saturation_multiplier = edge_arrow_saturation_multiplier,
node_position_multiplier = node_position_multiplier,
edge_size_multiplier = edge_size_multiplier,
edge_color = c("purple")
) %>%
nodes (
node_size_multiplier = node_size_multiplier,
node_position_multiplier = node_position_multiplier,
self_connection_color = c("purple")
) %>%
units(
points = tutor_and_detector_and_teacher_set$points[tutor_and_detector_and_teacher_set$points$visit_class == 1 & tutor_and_detector_and_teacher_set$points$high_learning_rate == 0,],
points_color = c("purple"),
show_mean = TRUE, show_points = FALSE, with_ci = TRUE
)
print(post_low)
diff_low <- ona:::plot.ena.directed.set(tutor_and_detector_and_teacher_set, title = "low learning rate Pre (grey) / Post-visit (purple) Subtracted")  %>%
units(
points = tutor_and_detector_and_teacher_set$points[tutor_and_detector_and_teacher_set$points$visit_class == -1 & tutor_and_detector_and_teacher_set$points$high_learning_rate == 0,],
points_color = c("black"),
show_mean = TRUE, show_points = FALSE, with_ci = TRUE
) %>%
units(
points = tutor_and_detector_and_teacher_set$points[tutor_and_detector_and_teacher_set$points$visit_class == 1 & tutor_and_detector_and_teacher_set$points$high_learning_rate == 0,],
points_color = c("purple"),
show_mean = TRUE, show_points = FALSE, with_ci = TRUE
) %>%
edges (
weights = colMeans(tutor_and_detector_and_teacher_set$line.weights[tutor_and_detector_and_teacher_set$line.weights$visit_class == -1 & tutor_and_detector_and_teacher_set$line.weights$high_learning_rate == 0,]) -
colMeans(tutor_and_detector_and_teacher_set$line.weights[tutor_and_detector_and_teacher_set$line.weights$visit_class == 1 & tutor_and_detector_and_teacher_set$line.weights$high_learning_rate == 0,]),
edge_arrow_saturation_multiplier = edge_arrow_saturation_multiplier,
edge_size_multiplier = edge_size_multiplier,
node_position_multiplier = node_position_multiplier,
edge_color = c("black", "purple")
) %>%
nodes (
node_size_multiplier = node_size_multiplier,
node_position_multiplier = node_position_multiplier,
self_connection_color = c("black", "purple")
)
print(diff_low)
pre_high <- ona:::plot.ena.directed.set(tutor_and_detector_and_teacher_set, title = "high Learning rate Pre-visit (grey)")  %>%
edges (
weights = colMeans(tutor_and_detector_and_teacher_set$line.weights[tutor_and_detector_and_teacher_set$line.weights$visit_class == -1 & tutor_and_detector_and_teacher_set$line.weights$high_learning_rate == 1,]),
edge_arrow_saturation_multiplier = edge_arrow_saturation_multiplier,
edge_size_multiplier = edge_size_multiplier,
node_position_multiplier = node_position_multiplier,
edge_color = c("black")
) %>%
nodes (
node_size_multiplier = node_size_multiplier,
node_position_multiplier = node_position_multiplier,
self_connection_color = c("black")
) %>%
units(
points = tutor_and_detector_and_teacher_set$points[tutor_and_detector_and_teacher_set$points$visit_class == -1 & tutor_and_detector_and_teacher_set$points$high_learning_rate == 1,],
points_color = c("black"),
show_mean = TRUE, show_points = FALSE, with_ci = TRUE
)
print(pre_high)
post_high <- ona:::plot.ena.directed.set(tutor_and_detector_and_teacher_set, title = "high Learning rate Post-visit (purple)")  %>%
edges (
weights = colMeans(tutor_and_detector_and_teacher_set$line.weights[tutor_and_detector_and_teacher_set$line.weights$visit_class == 1 & tutor_and_detector_and_teacher_set$line.weights$high_learning_rate == 1,]),
edge_arrow_saturation_multiplier = edge_arrow_saturation_multiplier,
edge_size_multiplier = edge_size_multiplier,
node_position_multiplier = node_position_multiplier,
edge_color = c("purple")
) %>%
nodes (
node_size_multiplier = node_size_multiplier,
node_position_multiplier = node_position_multiplier,
self_connection_color = c("purple")
) %>%
units(
points = tutor_and_detector_and_teacher_set$points[tutor_and_detector_and_teacher_set$points$visit_class == 1 & tutor_and_detector_and_teacher_set$points$high_learning_rate == 1,],
points_color = c("purple"),
show_mean = TRUE, show_points = FALSE, with_ci = TRUE
)
print(post_high)
diff_high <- ona:::plot.ena.directed.set(tutor_and_detector_and_teacher_set, title = "high learning rate Pre (grey) / Post-visit (purple) Subtracted")  %>%
units(
points = tutor_and_detector_and_teacher_set$points[tutor_and_detector_and_teacher_set$points$visit_class == -1 & tutor_and_detector_and_teacher_set$points$high_learning_rate == 1,],
points_color = c("black"),
show_mean = TRUE, show_points = FALSE, with_ci = TRUE
) %>%
units(
points = tutor_and_detector_and_teacher_set$points[tutor_and_detector_and_teacher_set$points$visit_class == 1 & tutor_and_detector_and_teacher_set$points$high_learning_rate == 1,],
points_color = c("purple"),
show_mean = TRUE, show_points = FALSE, with_ci = TRUE
) %>%
edges (
weights = colMeans(tutor_and_detector_and_teacher_set$line.weights[tutor_and_detector_and_teacher_set$line.weights$visit_class == -1 & tutor_and_detector_and_teacher_set$line.weights$high_learning_rate == 1,]) -
colMeans(tutor_and_detector_and_teacher_set$line.weights[tutor_and_detector_and_teacher_set$line.weights$visit_class == 1 & tutor_and_detector_and_teacher_set$line.weights$high_learning_rate == 1,]),
node_position_multiplier = node_position_multiplier,
edge_arrow_saturation_multiplier = edge_arrow_saturation_multiplier,
edge_size_multiplier = edge_size_multiplier,
edge_color = c("black", "purple")
) %>%
nodes (
node_size_multiplier = node_size_multiplier,
node_position_multiplier = node_position_multiplier,
self_connection_color = c("black", "purple")
)
print(diff_high)
# remove.packages("ona")
# # remove.packages("tma")
# install.packages("ona", repos = c("https://cran.qe-libs.org", "https://cran.rstudio.org"))
# # install.packages("tma", repos = c("https://cran.qe-libs.org", "https://cran.rstudio.org"))
library(ona)
library(tma)
library(readr)
library(dplyr)
library(tidyr)
library(tidyverse)
library(zoo)
library(effectsize)
# Process dataframe
df <- read_csv(".././datasets/final-sample-cb-lak24-extended.csv")
# Replace NA with 0
df["screenalignment_binary"][is.na(df["screenalignment_binary"])] <- 0
df$mean_dist <-  rowSums(df[startsWith(names(df), "Stu_")], na.rm=TRUE)
df <- df %>% drop_na(high_learning_rate)
View(df)
# Meta data
df[df$actor == "teacher",]$visit_class <- 3
df[df$actor == "teacher",]$had_visit <- 3
# Specify units
unit_cols <- c("dayID", "periodID", "actor",
"high_learning_rate" ,
"visit_class") # ask yeyu abt this
# Specify codes
tutor_and_detector_and_teacher <- c(
"Talking",
# "Monitoring",
"Raising_hand", "Misuse_State", "Idle_State",
# "Inactive", "Questioning",
"Struggle_State", "screenalignment_binary",
"hint_request",
"first_correct_attempt",
"Incorrect_attempt",
"Correct_attempt"
)
# Specify HOO and context
# HOO_rules_model <- tma:::rules(
#   dayID %in% UNIT$dayID & periodID %in% UNIT$periodID
# )
HOO_rules_model <- tma:::rules(
dayID %in% UNIT$dayID & periodID %in% UNIT$periodID & actor %in% UNIT$actor,
dayID %in% UNIT$dayID & periodID %in% UNIT$periodID & actor == "teacher"
)
context_model <- tma:::contexts(
x = df,
units = unit_cols,
hoo_rules = HOO_rules_model
)
tutor_detector_teacher_accum <- tma:::accumulate_contexts (
x = context_model,
codes = tutor_and_detector_and_teacher,
weight.by = function(x) { x },
decay.function = function(x) {
modality_effect <- c("tutor" = 5, "detector" = 10, "position" = 15, "observation" = 20)
modality <- FULL_CONTEXT[ROWS, modality]
duration <- FULL_CONTEXT[ROWS, {  end - start }]
weight <- (x < (duration + modality_effect[modality])) * 1
return (weight)
},
time.column = "start",
return.ena.set = FALSE,
mode.column = "modality"
)
# rotation.para <- list(pre_visit = tutor_detector_teacher_accum$meta.data$visit_class == -1,
#                       post_visit = tutor_detector_teacher_accum$meta.data$visit_class == 1)
rotation.para <- list(high_learning_rate=tutor_detector_teacher_accum$meta.data$high_learning_rate == 1,
low_learning_rate=tutor_detector_teacher_accum$meta.data$high_learning_rate == 0)
tutor_and_detector_and_teacher_set <-
model(tutor_detector_teacher_accum,
rotate.using ="mean",
rotation.params = rotation.para
)
edge_size_multiplier = 1.7
edge_arrow_saturation_multiplier = 2
node_size_multiplier = 0.5
node_position_multiplier = 2.5
tutor_and_detector_and_teacher_set$points$MR1 <- (-1)*(tutor_and_detector_and_teacher_set$points$MR1)
# tutor_and_detector_and_teacher_set$points$SVD2 <- (-1)*(tutor_and_detector_and_teacher_set$points$SVD2)
#
tutor_and_detector_and_teacher_set$rotation$nodes$MR1<- (-1)*(tutor_and_detector_and_teacher_set$rotation$nodes$MR1)
# tutor_and_detector_and_teacher_set$rotation$nodes$SVD2 <- (-1)*(tutor_and_detector_and_teacher_set$rotation$nodes$SVD2)
pre <- ona:::plot.ena.directed.set(tutor_and_detector_and_teacher_set, title = "Pre-visit (grey)")  %>%
edges (
weights = colMeans(tutor_and_detector_and_teacher_set$line.weights$visit_class$`-1`),
edge_arrow_saturation_multiplier = edge_arrow_saturation_multiplier,
edge_size_multiplier = edge_size_multiplier,
node_position_multiplier = node_position_multiplier,
edge_color = c("black")
) %>%
nodes (
node_size_multiplier = node_size_multiplier,
node_position_multiplier = node_position_multiplier,
self_connection_color = c("black")
) %>%
units(
points = tutor_and_detector_and_teacher_set$points$visit_class$`-1`,
points_color = c("black"),
show_mean = TRUE, show_points = FALSE, with_ci = TRUE
)
print(pre)
post <-  ona:::plot.ena.directed.set(tutor_and_detector_and_teacher_set, title = "Post-visit (purple)")  %>%
units(
points = tutor_and_detector_and_teacher_set$points$visit_class$`1`,
points_color = c("purple"),
show_mean = TRUE, show_points = FALSE, with_ci = TRUE
) %>%
edges (
weights = colMeans(tutor_and_detector_and_teacher_set$line.weights$visit_class$`1`),
edge_arrow_saturation_multiplier = edge_arrow_saturation_multiplier,
node_position_multiplier = node_position_multiplier,
edge_size_multiplier = edge_size_multiplier,
edge_color = c("purple")
) %>%
nodes (
node_size_multiplier = node_size_multiplier,
self_connection_color = c("purple")
)
print(post)
diff <- ona:::plot.ena.directed.set(tutor_and_detector_and_teacher_set, title = "Pre (grey) / Post-visit (purple) Subtracted")  %>%
units(
points = tutor_and_detector_and_teacher_set$points$visit_class$`-1`,
points_color = c("black"),
show_mean = TRUE, show_points = FALSE, with_ci = TRUE
) %>%
units(
points = tutor_and_detector_and_teacher_set$points$visit_class$`1`,
points_color = c("purple"),
show_mean = TRUE, show_points = FALSE, with_ci = TRUE
) %>%
edges (
weights = colMeans(tutor_and_detector_and_teacher_set$line.weights$visit_class$`-1`) -
colMeans(tutor_and_detector_and_teacher_set$line.weights$visit_class$`1`),
edge_arrow_saturation_multiplier = edge_arrow_saturation_multiplier,
edge_size_multiplier = edge_size_multiplier,
node_position_multiplier = node_position_multiplier,
edge_color = c("black", "purple")
) %>%
nodes (
node_size_multiplier = node_size_multiplier,
node_position_multiplier = node_position_multiplier,
self_connection_color = c("black", "purple")
)
print(diff)
pre_low <- ona:::plot.ena.directed.set(tutor_and_detector_and_teacher_set, title = "Low Learning rate Pre-visit (grey)")  %>%
edges (
weights = colMeans(tutor_and_detector_and_teacher_set$line.weights[tutor_and_detector_and_teacher_set$line.weights$visit_class == -1 & tutor_and_detector_and_teacher_set$line.weights$high_learning_rate == 0,]),
edge_arrow_saturation_multiplier = edge_arrow_saturation_multiplier,
edge_size_multiplier = edge_size_multiplier,
node_position_multiplier = node_position_multiplier,
edge_color = c("black")
) %>%
nodes (
node_size_multiplier = node_size_multiplier,
node_position_multiplier = node_position_multiplier,
self_connection_color = c("black")
) %>%
units(
points = tutor_and_detector_and_teacher_set$points[tutor_and_detector_and_teacher_set$points$visit_class == -1 & tutor_and_detector_and_teacher_set$points$high_learning_rate == 0,],
points_color = c("black"),
show_mean = TRUE, show_points = FALSE, with_ci = TRUE
)
print(pre_low)
post_low <- ona:::plot.ena.directed.set(tutor_and_detector_and_teacher_set, title = "Low Learning rate Post-visit (purple)")  %>%
edges (
weights = colMeans(tutor_and_detector_and_teacher_set$line.weights[tutor_and_detector_and_teacher_set$line.weights$visit_class == 1 & tutor_and_detector_and_teacher_set$line.weights$high_learning_rate == 0,]),
edge_arrow_saturation_multiplier = edge_arrow_saturation_multiplier,
node_position_multiplier = node_position_multiplier,
edge_size_multiplier = edge_size_multiplier,
edge_color = c("purple")
) %>%
nodes (
node_size_multiplier = node_size_multiplier,
node_position_multiplier = node_position_multiplier,
self_connection_color = c("purple")
) %>%
units(
points = tutor_and_detector_and_teacher_set$points[tutor_and_detector_and_teacher_set$points$visit_class == 1 & tutor_and_detector_and_teacher_set$points$high_learning_rate == 0,],
points_color = c("purple"),
show_mean = TRUE, show_points = FALSE, with_ci = TRUE
)
print(post_low)
diff_low <- ona:::plot.ena.directed.set(tutor_and_detector_and_teacher_set, title = "low learning rate Pre (grey) / Post-visit (purple) Subtracted")  %>%
units(
points = tutor_and_detector_and_teacher_set$points[tutor_and_detector_and_teacher_set$points$visit_class == -1 & tutor_and_detector_and_teacher_set$points$high_learning_rate == 0,],
points_color = c("black"),
show_mean = TRUE, show_points = FALSE, with_ci = TRUE
) %>%
units(
points = tutor_and_detector_and_teacher_set$points[tutor_and_detector_and_teacher_set$points$visit_class == 1 & tutor_and_detector_and_teacher_set$points$high_learning_rate == 0,],
points_color = c("purple"),
show_mean = TRUE, show_points = FALSE, with_ci = TRUE
) %>%
edges (
weights = colMeans(tutor_and_detector_and_teacher_set$line.weights[tutor_and_detector_and_teacher_set$line.weights$visit_class == -1 & tutor_and_detector_and_teacher_set$line.weights$high_learning_rate == 0,]) -
colMeans(tutor_and_detector_and_teacher_set$line.weights[tutor_and_detector_and_teacher_set$line.weights$visit_class == 1 & tutor_and_detector_and_teacher_set$line.weights$high_learning_rate == 0,]),
edge_arrow_saturation_multiplier = edge_arrow_saturation_multiplier,
edge_size_multiplier = edge_size_multiplier,
node_position_multiplier = node_position_multiplier,
edge_color = c("black", "purple")
) %>%
nodes (
node_size_multiplier = node_size_multiplier,
node_position_multiplier = node_position_multiplier,
self_connection_color = c("black", "purple")
)
print(diff_low)
pre_high <- ona:::plot.ena.directed.set(tutor_and_detector_and_teacher_set, title = "high Learning rate Pre-visit (grey)")  %>%
edges (
weights = colMeans(tutor_and_detector_and_teacher_set$line.weights[tutor_and_detector_and_teacher_set$line.weights$visit_class == -1 & tutor_and_detector_and_teacher_set$line.weights$high_learning_rate == 1,]),
edge_arrow_saturation_multiplier = edge_arrow_saturation_multiplier,
edge_size_multiplier = edge_size_multiplier,
node_position_multiplier = node_position_multiplier,
edge_color = c("black")
) %>%
nodes (
node_size_multiplier = node_size_multiplier,
node_position_multiplier = node_position_multiplier,
self_connection_color = c("black")
) %>%
units(
points = tutor_and_detector_and_teacher_set$points[tutor_and_detector_and_teacher_set$points$visit_class == -1 & tutor_and_detector_and_teacher_set$points$high_learning_rate == 1,],
points_color = c("black"),
show_mean = TRUE, show_points = FALSE, with_ci = TRUE
)
print(pre_high)
post_high <- ona:::plot.ena.directed.set(tutor_and_detector_and_teacher_set, title = "high Learning rate Post-visit (purple)")  %>%
edges (
weights = colMeans(tutor_and_detector_and_teacher_set$line.weights[tutor_and_detector_and_teacher_set$line.weights$visit_class == 1 & tutor_and_detector_and_teacher_set$line.weights$high_learning_rate == 1,]),
edge_arrow_saturation_multiplier = edge_arrow_saturation_multiplier,
edge_size_multiplier = edge_size_multiplier,
node_position_multiplier = node_position_multiplier,
edge_color = c("purple")
) %>%
nodes (
node_size_multiplier = node_size_multiplier,
node_position_multiplier = node_position_multiplier,
self_connection_color = c("purple")
) %>%
units(
points = tutor_and_detector_and_teacher_set$points[tutor_and_detector_and_teacher_set$points$visit_class == 1 & tutor_and_detector_and_teacher_set$points$high_learning_rate == 1,],
points_color = c("purple"),
show_mean = TRUE, show_points = FALSE, with_ci = TRUE
)
print(post_high)
diff_high <- ona:::plot.ena.directed.set(tutor_and_detector_and_teacher_set, title = "high learning rate Pre (grey) / Post-visit (purple) Subtracted")  %>%
units(
points = tutor_and_detector_and_teacher_set$points[tutor_and_detector_and_teacher_set$points$visit_class == -1 & tutor_and_detector_and_teacher_set$points$high_learning_rate == 1,],
points_color = c("black"),
show_mean = TRUE, show_points = FALSE, with_ci = TRUE
) %>%
units(
points = tutor_and_detector_and_teacher_set$points[tutor_and_detector_and_teacher_set$points$visit_class == 1 & tutor_and_detector_and_teacher_set$points$high_learning_rate == 1,],
points_color = c("purple"),
show_mean = TRUE, show_points = FALSE, with_ci = TRUE
) %>%
edges (
weights = colMeans(tutor_and_detector_and_teacher_set$line.weights[tutor_and_detector_and_teacher_set$line.weights$visit_class == -1 & tutor_and_detector_and_teacher_set$line.weights$high_learning_rate == 1,]) -
colMeans(tutor_and_detector_and_teacher_set$line.weights[tutor_and_detector_and_teacher_set$line.weights$visit_class == 1 & tutor_and_detector_and_teacher_set$line.weights$high_learning_rate == 1,]),
node_position_multiplier = node_position_multiplier,
edge_arrow_saturation_multiplier = edge_arrow_saturation_multiplier,
edge_size_multiplier = edge_size_multiplier,
edge_color = c("black", "purple")
) %>%
nodes (
node_size_multiplier = node_size_multiplier,
node_position_multiplier = node_position_multiplier,
self_connection_color = c("black", "purple")
)
print(diff_high)
# df_glm <- as.data.frame(tutor_and_detector_and_teacher_set$points) %>%
#   filter(visit_class != 3) %>% filter(visit_class != 0)
# df_glm$visit_class <- ifelse(df_glm$visit_class == -1, 0, 1)
# glm(visit_class ~ MR1+SVD2, data = df_glm, family = "binomial")
# before <- df_glm[df_glm$visit_class == 0,]$MR1
# after <- df_glm[df_glm$visit_class == 1,]$MR1
# wilcox.test(before, after)  # Using wilcox test instead
# rank_biserial(before, after)
points <- tutor_and_detector_and_teacher_set$points
before_low <- points[points$visit_class == -1 & points$high_learning_rate == 0, ] %>% arrange(actor)
after_low <- points[points$visit_class == 1 & points$high_learning_rate == 0, ] %>% arrange(actor)
wilcox.test(before_low$MR1, after_low$MR1, paired = TRUE)  # Using wilcox test instead
median(before_low$MR1)
median(after_low$MR1)
rank_biserial(before_low$MR1, after_low$MR1, paired = TRUE)
before_high <- points[points$visit_class == -1 & points$high_learning_rate == 1 & points$actor != "Stu_4b90cf3dc7e7213d1c95dbff195a4b08", ] %>% arrange(actor)
after_high <- points[points$visit_class == 1 & points$high_learning_rate == 1, ] %>% arrange(actor)
wilcox.test(before_high$MR1, after_high$MR1, paired = TRUE)  # Using wilcox test instead
median(before_high$MR1)
median(after_high$MR1)
rank_biserial(before_high$MR1, after_high$MR1, paired = TRUE) # make sure this is paired! !
lw <- tutor_and_detector_and_teacher_set$line.weights
before_low_lw <- lw[lw$visit_class == -1 & lw$high_learning_rate == 0, ] %>% arrange(actor)
after_low_lw <- lw[lw$visit_class == 1 & lw$high_learning_rate == 0, ] %>% arrange(actor)
before_high_lw <-  lw[lw$visit_class == -1 & lw$high_learning_rate == 1 & lw$actor != "Stu_4b90cf3dc7e7213d1c95dbff195a4b08", ] %>% arrange(actor)
after_high_lw <- lw[lw$visit_class == 1 & lw$high_learning_rate == 1, ] %>% arrange(actor)
# idle -> hint req, before low
#'[ not significant :( ]
# before <- before_low_lw$`Idle_State & hint_request`
# after <- after_low_lw$`Idle_State & hint_request`
# median(before)
# median(after)
# wilcox.test(before, after, paired = TRUE)
# rank_biserial(before, after, paired = TRUE)
# idle -> incorrect attempt, before low
#'[ not significant :( ]
# before <- before_low_lw$`Idle_State & Incorrect_attempt`
# after <- after_low_lw$`Idle_State & Incorrect_attempt`
# median(before)
# median(after)
# wilcox.test(before, after, paired = TRUE)
# rank_biserial(before, after, paired = TRUE)
# idle -> screen alignment, before low
#'[ not significant :( ]
# before <- before_low_lw$`Idle_State & screenalignment_binary`
# after <- after_low_lw$`Idle_State & screenalignment_binary`
# median(before)
# median(after)
# wilcox.test(before, after, paired = TRUE)
# rank_biserial(before, after, paired = TRUE)
# screen align -> hint req, before low
before <- before_low_lw$`screenalignment_binary & hint_request`
after <- after_low_lw$`screenalignment_binary & hint_request`
median(before)
median(after)
wilcox.test(before, after, paired = TRUE)
rank_biserial(before, after, paired = TRUE)
# screen align -> incorrect attempt, before low
#'[ not significant :( ]
# before <- before_low_lw$`screenalignment_binary & Incorrect_attempt`
# after <- after_low_lw$`screenalignment_binary & Incorrect_attempt`
# median(before)
# median(after)
# wilcox.test(before, after, paired = TRUE)
# rank_biserial(before, after, paired = TRUE)
# first_correct_attempt -> correct attempt, after low
# before <- before_low_lw$`first_correct_attempt & Correct_attempt`
# after <- after_low_lw$`first_correct_attempt & Correct_attempt`
# median(before)
# median(after)
# wilcox.test(before, after, paired = TRUE)
# rank_biserial(before, after, paired = TRUE)
# screen align -> incorrect attempt, before high
#'[ not significant :( ]
before <- before_high_lw$`screenalignment_binary & Incorrect_attempt`
after <- after_high_lw$`screenalignment_binary & Incorrect_attempt`
median(before)
median(after)
wilcox.test(before, after, paired = TRUE)
rank_biserial(before, after, paired = TRUE)
# first correct attempt -> correct attempt, after high
# before <- before_high_lw$`first_correct_attempt & Correct_attempt`
# after <- after_high_lw$`first_correct_attempt & Correct_attempt`
# median(before)
# median(after)
# wilcox.test(before, after, paired = TRUE)
# rank_biserial(before, after, paired = TRUE)
# first correct attempt -> screen align, after high
# before <- before_high_lw$`first_correct_attempt & screenalignment_binary`
# after <- after_high_lw$`first_correct_attempt & screenalignment_binary`
# median(before)
# median(after)
# wilcox.test(before, after, paired = TRUE)
# rank_biserial(before, after, paired = TRUE)
# correct attempt -> screen align, after high
before <- before_high_lw$`Correct_attempt & screenalignment_binary`
after <- after_high_lw$`Correct_attempt & screenalignment_binary`
median(before)
median(after)
wilcox.test(before, after, paired = TRUE)
rank_biserial(before, after, paired = TRUE)
